/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
    char * tmp;

    #define BUF_SIZE 256
    char buf[BUF_SIZE];
    /* This macro is used to record code line */
    #define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        {CONCAT; BEGIN(CMT); }
<CMT>"*/"   {CONCAT; BEGIN(INITIAL); }
<CMT>\n     {CONCAT;printf("%d: %s", yylineno, buf); strcpy(buf, "");}
<CMT>.      {CONCAT;}

"//".*      {CONCAT;}

"\""        {CONCAT; BEGIN(STR);
                return '"';
            }
<STR>"\""   {CONCAT; BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* {CONCAT; yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }

"+"         {CONCAT; return '+'; }
"-"         {CONCAT; return '-'; }
"*"         {CONCAT; return '*'; }
"/"         {CONCAT; return '/'; }
"%"         {CONCAT; return '%'; }
"++"        {CONCAT; return INC; }
"--"        {CONCAT; return DEC; }

">"         {CONCAT; return '>'; }
"<"         {CONCAT; return '<'; }
">="        {CONCAT; return GEQ; }
"<="        {CONCAT; return LEQ; }
"=="        {CONCAT; return EQL; }
"!="        {CONCAT; return NEQ; }

"="         {CONCAT; return '='; }
"+="        {CONCAT; return ADD_ASSIGN; }
"-="        {CONCAT; return SUB_ASSIGN; }
"*="        {CONCAT; return MUL_ASSIGN; }
"/="        {CONCAT; return QUO_ASSIGN; }
"%="        {CONCAT; return REM_ASSIGN; }

"&&"        {CONCAT; return LAND; }
"||"        {CONCAT; return LOR; }
"!"         {CONCAT; return '!'; }

"("         {CONCAT; return '('; }
")"         {CONCAT; return ')'; }
"["         {CONCAT; return '['; }
"]"         {CONCAT; return ']'; }
"{"         {CONCAT; return '{'; }
"}"         {CONCAT; return '}'; }

";"         {CONCAT; return ';'; }
","         {CONCAT; return ','; }
"\n"        {CONCAT;  printf("%d: %s\n", yylineno, buf); strcpy(buf, "");return NEWLINE;}

"print"     {CONCAT; return PRINT; }
"println"   {CONCAT; return PRINTLN; }
"if"        {CONCAT; return IF; }
"else"      {CONCAT; return ELSE; }
"for"       {CONCAT; return FOR; }

"int32"     {CONCAT; return INT; }
"float32"   {CONCAT; return FLOAT;}
"string"    {CONCAT; return STRING; }
"bool"      {CONCAT; return BOOL; }
"true"      {CONCAT;return TRUE;}
"false"     {CONCAT;return FALSE;}
"var"       {CONCAT; return VAR; }

{inumber}   {CONCAT; yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   {CONCAT; yylval.f_val = atoi(yytext); 
                return FLOAT_LIT;
            }
{id}        {
            CONCAT;
                tmp=malloc((strlen(yytext))*sizeof(char));
                strcpy(tmp,yytext);
                 yylval.s_val=tmp;
                return IDENTIFIER;
             }

<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                yylineno++;
                return NEWLINE;
            }
[ \t]+      {CONCAT;}
.           {CONCAT;}
%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}
